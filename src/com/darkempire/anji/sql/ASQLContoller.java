package com.darkempire.anji.sql;

import com.darkempire.anji.log.Log;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * Created with IntelliJ IDEA.
 * User: siredvin
 * Date: 06.12.13
 * Time: 9:47
 * To change this template use File | Settings | File Templates.
 */
@Deprecated
public abstract class ASQLContoller implements Statement {
    static final int logIndex = Log.addString("SQL");

    public abstract Statement getStatement();

    @Override
    public ResultSet executeQuery(String sql) throws SQLException {
        Log.log(logIndex, "executeQuery:", sql);
        return getStatement().executeQuery(sql);
    }

    @Override
    public int executeUpdate(String sql) throws SQLException {
        Log.log(logIndex, "executeUpdate:", sql);
        return getStatement().executeUpdate(sql);
    }

    @Override
    public int getMaxFieldSize() throws SQLException {
        return getStatement().getMaxFieldSize();
    }

    @Override
    public void setMaxFieldSize(int max) throws SQLException {
        Log.log(logIndex, "setMaxFieldSize:", max);
        getStatement().setMaxFieldSize(max);
    }

    @Override
    public int getMaxRows() throws SQLException {
        return getStatement().getMaxRows();
    }

    @Override
    public void setMaxRows(int max) throws SQLException {
        Log.log(logIndex, "setMaxRows:", max);
        getStatement().setMaxRows(max);
    }

    @Override
    public void setEscapeProcessing(boolean enable) throws SQLException {
        Log.log(logIndex, "setEscapeProcessing:", enable);
        getStatement().setEscapeProcessing(enable);
    }

    @Override
    public int getQueryTimeout() throws SQLException {
        return getStatement().getQueryTimeout();
    }

    @Override
    public void setQueryTimeout(int seconds) throws SQLException {
        Log.log(logIndex, "setQueryTimeout:", seconds);
        getStatement().setQueryTimeout(seconds);
    }

    @Override
    public void cancel() throws SQLException {
        getStatement().cancel();
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return getStatement().getWarnings();
    }

    @Override
    public void clearWarnings() throws SQLException {
        Log.log(logIndex, "clearWarnings");
        getStatement().clearWarnings();
    }

    @Override
    public void setCursorName(String name) throws SQLException {
        Log.log(logIndex, "setCursorName:", name);
        getStatement().setCursorName(name);
    }

    @Override
    public boolean execute(String sql) throws SQLException {
        Log.log(logIndex, "execute:", sql);
        return getStatement().execute(sql);
    }

    @Override
    public ResultSet getResultSet() throws SQLException {
        return getStatement().getResultSet();
    }

    @Override
    public int getUpdateCount() throws SQLException {
        return getStatement().getUpdateCount();
    }

    @Override
    public boolean getMoreResults() throws SQLException {
        return getStatement().getMoreResults();
    }

    @Override
    public void setFetchDirection(int direction) throws SQLException {
        Log.log(logIndex, "setFetchDirection:", direction);
        getStatement().setFetchDirection(direction);
    }

    @Override
    public int getFetchDirection() throws SQLException {
        return getStatement().getFetchDirection();
    }

    @Override
    public void setFetchSize(int rows) throws SQLException {
        Log.log(logIndex, "setFetchSize:", rows);
        getStatement().setFetchSize(rows);
    }

    @Override
    public int getFetchSize() throws SQLException {
        return getStatement().getFetchSize();
    }

    @Override
    public int getResultSetConcurrency() throws SQLException {
        return getStatement().getResultSetConcurrency();
    }

    @Override
    public int getResultSetType() throws SQLException {
        return getStatement().getResultSetType();
    }

    @Override
    public void addBatch(String sql) throws SQLException {
        Log.log(logIndex, "addBatch:", sql);
        getStatement().addBatch(sql);
    }

    @Override
    public void clearBatch() throws SQLException {
        Log.log(logIndex, "clearBatch");
        getStatement().clearBatch();
    }

    @Override
    public int[] executeBatch() throws SQLException {
        Log.log(logIndex, "executeBatch");
        return getStatement().executeBatch();
    }

    @Override
    public boolean getMoreResults(int current) throws SQLException {
        return getStatement().getMoreResults(current);
    }

    @Override
    public ResultSet getGeneratedKeys() throws SQLException {
        return getStatement().getGeneratedKeys();
    }

    @Override
    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        Log.log(logIndex, "executeUpdate:", sql);
        return getStatement().executeUpdate(sql, autoGeneratedKeys);
    }

    @Override
    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        Log.log(logIndex, "executeUpdate:", sql);
        return getStatement().executeUpdate(sql, columnIndexes);
    }

    @Override
    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        Log.log(logIndex, "executeUpdate:", sql);
        return getStatement().executeUpdate(sql, columnNames);
    }

    @Override
    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        Log.log(logIndex, "execute:", sql);
        return getStatement().execute(sql, autoGeneratedKeys);
    }

    @Override
    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        Log.log(logIndex, "execute:", sql);
        return getStatement().execute(sql, columnIndexes);
    }

    @Override
    public boolean execute(String sql, String[] columnNames) throws SQLException {
        Log.log(logIndex, "execute:", sql);
        return getStatement().execute(sql, columnNames);
    }

    @Override
    public int getResultSetHoldability() throws SQLException {
        return getStatement().getResultSetHoldability();
    }

    @Override
    public boolean isClosed() throws SQLException {
        return getStatement().isClosed();
    }

    @Override
    public void setPoolable(boolean poolable) throws SQLException {
        Log.log(logIndex, "setPoolable:", poolable);
        getStatement().setPoolable(poolable);
    }

    @Override
    public boolean isPoolable() throws SQLException {
        return getStatement().isPoolable();
    }

    @Override
    public void closeOnCompletion() throws SQLException {
        Log.log(logIndex, "closeOnCompletion:");
        getStatement().closeOnCompletion();
    }

    @Override
    public boolean isCloseOnCompletion() throws SQLException {
        return getStatement().isCloseOnCompletion();
    }

    @Override
    public <T> T unwrap(Class<T> iface) throws SQLException {
        Log.log(logIndex, "unwrap:", iface);
        return getStatement().unwrap(iface);
    }

    @Override
    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        Log.log(logIndex, "isWrapperFor:", iface);
        return getStatement().isWrapperFor(iface);
    }
}
